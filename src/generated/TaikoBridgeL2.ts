/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IBridge {
  export type ContextStruct = {
    undefined: BytesLike;
    undefined: string;
    undefined: BigNumberish;
  };

  export type ContextStructOutput = [string, string, BigNumber];

  export type MessageStruct = {
    undefined: BigNumberish;
    undefined: string;
    undefined: BigNumberish;
    undefined: BigNumberish;
    undefined: string;
    undefined: string;
    undefined: string;
    undefined: BigNumberish;
    undefined: BigNumberish;
    undefined: BigNumberish;
    undefined: BigNumberish;
    undefined: BytesLike;
    undefined: string;
  };

  export type MessageStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ];
}

export interface TaikoBridgeL2Interface extends utils.Interface {
  functions: {
    "addressManager()": FunctionFragment;
    "context()": FunctionFragment;
    "getMessageStatus(bytes32)": FunctionFragment;
    "getMessageStatusSlot(bytes32)": FunctionFragment;
    "hashMessage((uint256,address,uint256,uint256,address,address,address,uint256,uint256,uint256,uint256,bytes,string))": FunctionFragment;
    "init(address)": FunctionFragment;
    "isDestChainEnabled(uint256)": FunctionFragment;
    "isEtherReleased(bytes32)": FunctionFragment;
    "isMessageFailed(bytes32,uint256,bytes)": FunctionFragment;
    "isMessageReceived(bytes32,uint256,bytes)": FunctionFragment;
    "isMessageSent(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "processMessage((uint256,address,uint256,uint256,address,address,address,uint256,uint256,uint256,uint256,bytes,string),bytes)": FunctionFragment;
    "releaseEther((uint256,address,uint256,uint256,address,address,address,uint256,uint256,uint256,uint256,bytes,string),bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resolve(uint256,bytes32,bool)": FunctionFragment;
    "resolve(bytes32,bool)": FunctionFragment;
    "retryMessage((uint256,address,uint256,uint256,address,address,address,uint256,uint256,uint256,uint256,bytes,string),bool)": FunctionFragment;
    "sendMessage((uint256,address,uint256,uint256,address,address,address,uint256,uint256,uint256,uint256,bytes,string))": FunctionFragment;
    "setAddressManager(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addressManager"
      | "context"
      | "getMessageStatus"
      | "getMessageStatusSlot"
      | "hashMessage"
      | "init"
      | "isDestChainEnabled"
      | "isEtherReleased"
      | "isMessageFailed"
      | "isMessageReceived"
      | "isMessageSent"
      | "owner"
      | "processMessage"
      | "releaseEther"
      | "renounceOwnership"
      | "resolve(uint256,bytes32,bool)"
      | "resolve(bytes32,bool)"
      | "retryMessage"
      | "sendMessage"
      | "setAddressManager"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addressManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "context", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMessageStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageStatusSlot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hashMessage",
    values: [IBridge.MessageStruct]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isDestChainEnabled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isEtherReleased",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMessageFailed",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMessageReceived",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMessageSent",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processMessage",
    values: [IBridge.MessageStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseEther",
    values: [IBridge.MessageStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolve(uint256,bytes32,bool)",
    values: [BigNumberish, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "resolve(bytes32,bool)",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "retryMessage",
    values: [IBridge.MessageStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [IBridge.MessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddressManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "context", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMessageStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessageStatusSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDestChainEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEtherReleased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMessageFailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMessageReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMessageSent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolve(uint256,bytes32,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolve(bytes32,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retryMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddressManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddressManagerChanged(address)": EventFragment;
    "DestChainEnabled(uint256,bool)": EventFragment;
    "EtherReleased(bytes32,address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MessageSent(bytes32,tuple)": EventFragment;
    "MessageStatusChanged(bytes32,uint8,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SignalSent(address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressManagerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DestChainEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EtherReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageStatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalSent"): EventFragment;
}

export interface AddressManagerChangedEventObject {
  addressManager: string;
}
export type AddressManagerChangedEvent = TypedEvent<
  [string],
  AddressManagerChangedEventObject
>;

export type AddressManagerChangedEventFilter =
  TypedEventFilter<AddressManagerChangedEvent>;

export interface DestChainEnabledEventObject {
  chainId: BigNumber;
  enabled: boolean;
}
export type DestChainEnabledEvent = TypedEvent<
  [BigNumber, boolean],
  DestChainEnabledEventObject
>;

export type DestChainEnabledEventFilter =
  TypedEventFilter<DestChainEnabledEvent>;

export interface EtherReleasedEventObject {
  msgHash: string;
  to: string;
  amount: BigNumber;
}
export type EtherReleasedEvent = TypedEvent<
  [string, string, BigNumber],
  EtherReleasedEventObject
>;

export type EtherReleasedEventFilter = TypedEventFilter<EtherReleasedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MessageSentEventObject {
  msgHash: string;
  message: [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ];
}
export type MessageSentEvent = TypedEvent<
  [
    string,
    [
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string
    ]
  ],
  MessageSentEventObject
>;

export type MessageSentEventFilter = TypedEventFilter<MessageSentEvent>;

export interface MessageStatusChangedEventObject {
  msgHash: string;
  status: number;
  transactor: string;
}
export type MessageStatusChangedEvent = TypedEvent<
  [string, number, string],
  MessageStatusChangedEventObject
>;

export type MessageStatusChangedEventFilter =
  TypedEventFilter<MessageStatusChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SignalSentEventObject {
  sender: string;
  msgHash: string;
}
export type SignalSentEvent = TypedEvent<
  [string, string],
  SignalSentEventObject
>;

export type SignalSentEventFilter = TypedEventFilter<SignalSentEvent>;

export interface TaikoBridgeL2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TaikoBridgeL2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressManager(overrides?: CallOverrides): Promise<[string]>;

    context(overrides?: CallOverrides): Promise<[IBridge.ContextStructOutput]>;

    getMessageStatus(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getMessageStatusSlot(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashMessage(
      message: IBridge.MessageStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    init(
      _addressManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isDestChainEnabled(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { enabled: boolean }>;

    isEtherReleased(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMessageFailed(
      msgHash: BytesLike,
      destChainId: BigNumberish,
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMessageReceived(
      msgHash: BytesLike,
      srcChainId: BigNumberish,
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMessageSent(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    processMessage(
      message: IBridge.MessageStruct,
      proof: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    releaseEther(
      message: IBridge.MessageStruct,
      proof: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "resolve(uint256,bytes32,bool)"(
      chainId: BigNumberish,
      name: BytesLike,
      allowZeroAddress: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "resolve(bytes32,bool)"(
      name: BytesLike,
      allowZeroAddress: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    retryMessage(
      message: IBridge.MessageStruct,
      isLastAttempt: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sendMessage(
      message: IBridge.MessageStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAddressManager(
      newAddressManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addressManager(overrides?: CallOverrides): Promise<string>;

  context(overrides?: CallOverrides): Promise<IBridge.ContextStructOutput>;

  getMessageStatus(
    msgHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  getMessageStatusSlot(
    msgHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  hashMessage(
    message: IBridge.MessageStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  init(
    _addressManager: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isDestChainEnabled(
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isEtherReleased(
    msgHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMessageFailed(
    msgHash: BytesLike,
    destChainId: BigNumberish,
    proof: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMessageReceived(
    msgHash: BytesLike,
    srcChainId: BigNumberish,
    proof: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMessageSent(
    msgHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  processMessage(
    message: IBridge.MessageStruct,
    proof: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  releaseEther(
    message: IBridge.MessageStruct,
    proof: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "resolve(uint256,bytes32,bool)"(
    chainId: BigNumberish,
    name: BytesLike,
    allowZeroAddress: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  "resolve(bytes32,bool)"(
    name: BytesLike,
    allowZeroAddress: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  retryMessage(
    message: IBridge.MessageStruct,
    isLastAttempt: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sendMessage(
    message: IBridge.MessageStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAddressManager(
    newAddressManager: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addressManager(overrides?: CallOverrides): Promise<string>;

    context(overrides?: CallOverrides): Promise<IBridge.ContextStructOutput>;

    getMessageStatus(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    getMessageStatusSlot(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    hashMessage(
      message: IBridge.MessageStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    init(_addressManager: string, overrides?: CallOverrides): Promise<void>;

    isDestChainEnabled(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isEtherReleased(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMessageFailed(
      msgHash: BytesLike,
      destChainId: BigNumberish,
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMessageReceived(
      msgHash: BytesLike,
      srcChainId: BigNumberish,
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMessageSent(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    processMessage(
      message: IBridge.MessageStruct,
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    releaseEther(
      message: IBridge.MessageStruct,
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "resolve(uint256,bytes32,bool)"(
      chainId: BigNumberish,
      name: BytesLike,
      allowZeroAddress: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "resolve(bytes32,bool)"(
      name: BytesLike,
      allowZeroAddress: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    retryMessage(
      message: IBridge.MessageStruct,
      isLastAttempt: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    sendMessage(
      message: IBridge.MessageStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    setAddressManager(
      newAddressManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddressManagerChanged(address)"(
      addressManager?: null
    ): AddressManagerChangedEventFilter;
    AddressManagerChanged(
      addressManager?: null
    ): AddressManagerChangedEventFilter;

    "DestChainEnabled(uint256,bool)"(
      chainId?: BigNumberish | null,
      enabled?: null
    ): DestChainEnabledEventFilter;
    DestChainEnabled(
      chainId?: BigNumberish | null,
      enabled?: null
    ): DestChainEnabledEventFilter;

    "EtherReleased(bytes32,address,uint256)"(
      msgHash?: BytesLike | null,
      to?: null,
      amount?: null
    ): EtherReleasedEventFilter;
    EtherReleased(
      msgHash?: BytesLike | null,
      to?: null,
      amount?: null
    ): EtherReleasedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MessageSent(bytes32,tuple)"(
      msgHash?: BytesLike | null,
      message?: null
    ): MessageSentEventFilter;
    MessageSent(
      msgHash?: BytesLike | null,
      message?: null
    ): MessageSentEventFilter;

    "MessageStatusChanged(bytes32,uint8,address)"(
      msgHash?: BytesLike | null,
      status?: null,
      transactor?: null
    ): MessageStatusChangedEventFilter;
    MessageStatusChanged(
      msgHash?: BytesLike | null,
      status?: null,
      transactor?: null
    ): MessageStatusChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SignalSent(address,bytes32)"(
      sender?: null,
      msgHash?: null
    ): SignalSentEventFilter;
    SignalSent(sender?: null, msgHash?: null): SignalSentEventFilter;
  };

  estimateGas: {
    addressManager(overrides?: CallOverrides): Promise<BigNumber>;

    context(overrides?: CallOverrides): Promise<BigNumber>;

    getMessageStatus(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMessageStatusSlot(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashMessage(
      message: IBridge.MessageStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _addressManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isDestChainEnabled(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isEtherReleased(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMessageFailed(
      msgHash: BytesLike,
      destChainId: BigNumberish,
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMessageReceived(
      msgHash: BytesLike,
      srcChainId: BigNumberish,
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMessageSent(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    processMessage(
      message: IBridge.MessageStruct,
      proof: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    releaseEther(
      message: IBridge.MessageStruct,
      proof: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "resolve(uint256,bytes32,bool)"(
      chainId: BigNumberish,
      name: BytesLike,
      allowZeroAddress: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "resolve(bytes32,bool)"(
      name: BytesLike,
      allowZeroAddress: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    retryMessage(
      message: IBridge.MessageStruct,
      isLastAttempt: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sendMessage(
      message: IBridge.MessageStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    setAddressManager(
      newAddressManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    context(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMessageStatus(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMessageStatusSlot(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashMessage(
      message: IBridge.MessageStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _addressManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isDestChainEnabled(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEtherReleased(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMessageFailed(
      msgHash: BytesLike,
      destChainId: BigNumberish,
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMessageReceived(
      msgHash: BytesLike,
      srcChainId: BigNumberish,
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMessageSent(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processMessage(
      message: IBridge.MessageStruct,
      proof: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    releaseEther(
      message: IBridge.MessageStruct,
      proof: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "resolve(uint256,bytes32,bool)"(
      chainId: BigNumberish,
      name: BytesLike,
      allowZeroAddress: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "resolve(bytes32,bool)"(
      name: BytesLike,
      allowZeroAddress: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    retryMessage(
      message: IBridge.MessageStruct,
      isLastAttempt: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sendMessage(
      message: IBridge.MessageStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAddressManager(
      newAddressManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
